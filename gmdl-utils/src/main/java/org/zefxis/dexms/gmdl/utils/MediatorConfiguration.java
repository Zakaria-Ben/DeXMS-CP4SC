package org.zefxis.dexms.gmdl.utils;

import java.io.FileReader;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.zefxis.dexms.gmdl.utils.enums.ProtocolType;
import org.zefxis.dexms.gmdl.utils.enums.RoleType;

public class MediatorConfiguration {
  private String subcomponentAddress;
  private int subcomponentPort;
  private RoleType subcomponentRole;
  private String serviceAddress;
  private Integer servicePort;
  private String generatedCodePath = "src/main/resources";
  
  public MediatorConfiguration() {
    // TODO Auto-generated constructor stub
  }
  
  public MediatorConfiguration(String jsonConfiguration) {
    // TODO Auto-generated constructor stub
  }
  
  public String getSubcomponentAddress() {
    return subcomponentAddress;
  }
  
  public void setSubcomponentAddress(String subcomponentAddress) {
    this.subcomponentAddress = subcomponentAddress;
  }
  
  public int getSubcomponentPort() {
    return subcomponentPort;
  }
  
  public void setSubcomponentPort(int subcomponentPort) {
    this.subcomponentPort = subcomponentPort;
  }
  
  public RoleType getSubcomponentRole() {
    return subcomponentRole;
  }

  public void setSubcomponentRole(RoleType componentRole) {
    this.subcomponentRole = componentRole;
  }
  
  public void setServiceAddress(String serviceAddress) {
    this.serviceAddress = serviceAddress;
  }
  
  public String getServiceAddress() {
    return serviceAddress;
  }
  
  public void setServicePort(Integer servicePort) {
    this.servicePort = servicePort;
  }
  
  public Integer getServicePort() {
    return servicePort;
  }
  
  public void setGeneratedCodePath(String generatedCodePath) {
    this.generatedCodePath = generatedCodePath;
  }
  
  public String getGeneratedCodePath() {
    return generatedCodePath;
  }
  
  /* For SOAP */
  private String serviceName = "Mediator"; // name of the published interface used by the client, generated by default like {ClassName}Service
  private String targetNamespace = "org.zefxis.dexms.mediator.generated"; // package nameSpace of the service
  
  public void setTargetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
  }
  
  public String getServiceName() {
    return serviceName;
  }
  
  
  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }
  
  public String getTargetNamespace() {
    return targetNamespace;
  }

  public void parseFromJSON(GmServiceRepresentation gmServiceRep, String configFilePath) {
	  
	
    JSONParser parser = new JSONParser();
    JSONObject jsonObject = new JSONObject();
    try {
        FileReader fileReader = new FileReader(configFilePath);
        jsonObject = ((JSONObject) parser.parse(fileReader));
    } catch (Exception _x) {
    }

    
    if(jsonObject.get("target_namespace") != null)
    	setTargetNamespace((String) jsonObject.get("target_namespace"));
    if(jsonObject.get("service_name") != null)
    	setServiceName((String) jsonObject.get("service_name"));
    if(jsonObject.get("invocation_address") != null)
    	setServiceAddress((String) jsonObject.get("invocation_address"));
    if(jsonObject.get("service_port") != null)
    	setServicePort((int)Integer.parseInt((String)jsonObject.get("service_port")));
    
    setSubcomponentAddress((String) jsonObject.get("subcomponent_address"));
    
    String subcomponentPort = (String) jsonObject.get("subcomponent_port");
    
    int subcomponentPortInt = 0;
    if(subcomponentPort!=null && !subcomponentPort.equals("")) {
    	subcomponentPortInt = Integer.parseInt(subcomponentPort);
    }
    
    setSubcomponentPort(subcomponentPortInt);
    

  }
 
}